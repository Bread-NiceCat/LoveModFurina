plugins {
    id 'com.github.johnrengelman.shadow'
}
architectury {
    platformSetupLoomIde()
    neoForge()
}
archivesBaseName += "-neoforge"
def generatedResources = new File(project(":common").getProjectDir(), "/src/main/generated")
configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}
def use_jbr_feature = rootProject.ext.use_jbr_feature
loom {
    runs {
        client {
            vmArg "-Dmixin.debug.export=true"
            if (use_jbr_feature) {
                vmArg "-XX:+AllowEnhancedClassRedefinition"
            }
        }
        data {
            data()
            name("NeoForge Data Generator")

            programArgs "--all", "--mod", "lovemod"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", new File(project(":common").getProjectDir(), "/src/main/resources").absolutePath
        }
    }
}
repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}
dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-neoforge-api:${rootProject.jei_version}")
    modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-neoforge:${rootProject.jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
