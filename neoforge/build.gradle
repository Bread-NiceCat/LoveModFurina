plugins {
    id 'com.github.johnrengelman.shadow'
}
architectury {
    platformSetupLoomIde()
    neoForge()
}
def generatedResources = new File(project(":common").getProjectDir(), "/src/main/generated")
configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}
loom {
    runs {
        client {
            vmArg "-Dmixin.debug.export=true"
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        data {
            data()
            name("NeoForge Data Generator")

            programArgs "--all", "--mod", "lovemod"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", new File(project(":common").getProjectDir(), "/src/main/resources").absolutePath
        }
    }
}
repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}
dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-neoforge-api:${rootProject.jei_version}")
    modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-neoforge:${rootProject.jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
